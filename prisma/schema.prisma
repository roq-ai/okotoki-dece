generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bitcoin_info {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderbooks_trades String              @db.VarChar(255)
  liquidations_info String              @db.VarChar(255)
  organization_id   String?             @db.Uuid
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  organization      organization?       @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  suggested_updates suggested_updates[]
}

model organization {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?        @db.VarChar(255)
  image        String?        @db.VarChar(255)
  name         String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  user_id      String         @db.Uuid
  tenant_id    String         @db.VarChar(255)
  bitcoin_info bitcoin_info[]
  user         user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model suggested_updates {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  suggested_info  String        @db.VarChar(255)
  user_id         String?       @db.Uuid
  bitcoin_info_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  bitcoin_info    bitcoin_info? @relation(fields: [bitcoin_info_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user?         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String              @unique @db.VarChar(255)
  firstName         String?             @db.VarChar(255)
  lastName          String?             @db.VarChar(255)
  roq_user_id       String              @db.VarChar(255)
  tenant_id         String              @db.VarChar(255)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  organization      organization[]
  suggested_updates suggested_updates[]
}
